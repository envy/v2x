#include "main.h"

#include "parser.h"
#include "factory.h"
#include "Formatter.h"

#include <unistd.h>
#include <iostream>
#include <thread>

Main *_main = nullptr;

void dump_geonet(uint8_t *buf, uint32_t len)
{
	auto *e = (ethernet_t *)buf;
	auto *g = (geonetworking_t *)e->data;

	std::cout << "GeoNet " << Formatter::format_geonet_type((geonet_type_t) g->common_header.type.raw) << std::endl;

	switch (g->common_header.type.raw)
	{
		case GEONET_TYPE_TSB_SHB:
		case GEONET_TYPE_BEACON:
		{
			auto *pos = (geonet_long_position_vector_t *)g->data;
			double lat = ntohl(pos->latitude) / 10000000.0;
			double lon = ntohl(pos->longitude) / 10000000.0;
			std::cout << " Location: " << lat << ", " << lon << std::endl;
			std::cout << " Timestamp: " << pos->timestamp << std::endl;
		}
	}
}

void asserts()
{
	static_assert(sizeof(ethernet_t) == 14);
	static_assert(sizeof(geonetworking_t) == 4+8);
	static_assert(sizeof(geonet_long_position_vector_t) == 24);
	static_assert(sizeof(geonet_beacon_t) == 24);
	static_assert(sizeof(geonet_tsb_shb_t) == 28);
	static_assert(sizeof(btp_b_t) == 4);
}

void send_cam(uint8_t mac[6], StationID_t id, Proxy *p)
{
	CAMFactory r(mac);
	r.set_timestamp(timestamp_now());
	r.set_location(52.2732617, 10.5252691, 70);
	r.set_station_id(id);
	r.set_station_type(StationType_pedestrian);
	r.build_packet();
	p->send_packet(r.get_raw(), r.get_len());
}

void send_cam_thread(uint8_t mac[6], StationID_t id, Proxy *p)
{
	while (true)
	{
		send_cam(mac, id, p);
		usleep(1000*1000);
	}
}

void send_denm(uint8_t mac[6], StationID_t id, Proxy *p)
{
	uint32_t t = timestamp_now();
	DENMFactory d(mac);
	d.set_timestamp(t);
	d.set_detection_timestamp(t - 1000);
	d.set_reference_timestamp(t);
	d.set_location(52.2732617, 10.5252691);
	d.set_station_id(id);
	d.set_station_type(StationType_pedestrian);
	d.set_event_location(52.2732617, 10.5252691, 73);
	d.set_action_id(id, 1);
	d.add_situation(InformationQuality_lowest, CauseCodeType_hazardousLocation_SurfaceCondition, 0);
	d.build_packet();
	p->send_packet(d.get_raw(), d.get_len());
}

void send_denm_thread(uint8_t mac[6], StationID_t id, Proxy *p)
{
	while (true)
	{
		send_denm(mac, id, p);
		usleep(1000*1000);
	}
}

void Main::reader_thread()
{
	uint8_t buf[2048];
	uint32_t buflen = sizeof(buf);
	while((buflen = p.get_packet((uint8_t *)&buf, buflen)) >= 0)
	{
		array_t a = { buf, buflen };
		ms.add_msg(a);
		buflen = sizeof(buf);
	}
}

void Main::draw_data()
{
	ms.draw_station_list();
	ms.draw_details();
}

void Main::write_text(float x, float y, const sf::Color &color, const std::string &text)
{
	sf::Text t;
	t.setFont(font);
	t.setCharacterSize(24);
	t.setFillColor(color);
	t.setPosition(x, y);
	t.setString(text);
	window->draw(t);
}

void Main::key_pressed(sf::Keyboard::Key k)
{
	is_pressed = true;
	last_key = k;
}

void Main::key_handler()
{
	if (is_pressed && !sf::Keyboard::isKeyPressed(last_key))
	{
		is_pressed = false;
	} else if (is_pressed && sf::Keyboard::isKeyPressed(last_key))
	{
		return;
	}

	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Q))
	{
		key_pressed(sf::Keyboard::Q);
		window->close();
		return;
	}

	if (sf::Keyboard::isKeyPressed(sf::Keyboard::C))
	{
		key_pressed(sf::Keyboard::C);
		ms.set_show_cams(!ms.get_show_cams());
	}
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::D))
	{
		key_pressed(sf::Keyboard::D);
		ms.set_show_denms(!ms.get_show_denms());
	}
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::S))
	{
		key_pressed(sf::Keyboard::S);
		ms.set_show_spatems(!ms.get_show_spatems());
	}
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::M))
	{
		key_pressed(sf::Keyboard::M);
		ms.set_show_mapems(!ms.get_show_mapems());
	}

	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down))
	{
		key_pressed(sf::Keyboard::Down);
		ms.inc_selected();
	}
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up))
	{
		key_pressed(sf::Keyboard::Up);
		ms.dec_selected();
	}
}

#define SERVER "10.1.4.72"
#define PORT 17565
int main(int argc, char *argv[]) {
	int port = PORT;

	asserts();

	if (argc < 2) {
		std::cout << "Usage: " << argv[0] << " <addr> [port]" << std::endl;
		return -1;
	}
	if (argc >= 3) {
		port = (int) strtoul(argv[2], nullptr, 10);
	}

	uint8_t aspat[] = "\xff\xff\xff\xff\xff\xff\x00\x0d\x41\x12\x21\x4d\x89\x47\x01\x00" \
"\x1a\x01\x20\x50\x03\x00\x00\x8a\x01\x00\x3c\xe8\x00\x0d\x41\x12" \
"\x21\x4d\xc4\xaa\x78\x0e\x1f\x28\x8c\x7a\x06\x45\xe0\x84\x80\x19" \
"\x00\x1b\x00\x01\x00\x00\x07\xd4\x00\x00\x01\x04\x00\x12\x20\x4c" \
"\x00\x00\x00\x12\x01\x02\x00\x11\x00\x10\x43\x04\x09\xb8\x01\x02" \
"\x1b\xa0\x64\x60\xc3\x60\x93\xc0\x00\xc1\x0d\xd0\x32\x30\x61\xb0" \
"\x49\xe0\x00\x80\x8a\x08\x13\x70\x05\x04\x50\x40\xff\x80\x30\x21" \
"\x82\x04\xdc\x01\xc1\x14\x10\x26\xe0\x10\x08\x60\x81\xff\x00\x90" \
"\x45\x04\x09\xb8\x05\x02\x18\x20\x7f\xc0\x2c\x11\x41\x02\x6e\x01" \
"\x80\x86\xe8\x3a\x38\x3d\xf8\x3c\x1b\x00\xd0\x43\x74\x1d\x1c\x1e" \
"\xfc\x1e\x0d\x80\x70\x22\x82\x04\xdc\x03\xc1\x0c\x10\x3f\xe0\x20" \
"\x08\x60\x81\xff\x01\x10\x43\x04\x0f\xf8\x09\x02\x18\x20\x7f\xc0";
	uint8_t mapem1[] = "\xff\xff\xff\xff\xff\xff\x00\x0d\x41\x12\x21\x4d\x89\x47\x01\x00" \
"\x1a\x01\x20\x50\x03\x00\x02\xe8\x01\x00\x3c\xe8\x00\x0d\x41\x12" \
"\x21\x4d\xc4\xaa\x77\x70\x1f\x28\x8c\x7a\x06\x45\xe0\x84\x80\x19" \
"\x00\x1b\x00\x01\x00\x00\x07\xd3\x00\x00\x01\x05\x00\x12\x20\x4c" \
"\x08\x00\x03\x02\x4c\xa7\x05\x9b\x68\x01\x88\x01\x20\x13\x53\x36" \
"\x0c\x39\xc6\x3e\xdf\x10\x03\x04\x0c\x35\x00\x00\x02\x94\x42\x68" \
"\xca\x22\xc0\x01\x00\x00\x00\x5e\x04\xdd\x20\x80\x02\x07\xe7\x8b" \
"\x05\x33\x06\x00\x9a\x33\x08\xb0\x00\x40\x00\x00\x07\x85\x94\x62" \
"\x82\x06\x56\x81\x4c\xa1\x60\x46\x8c\xe2\x2c\x00\x10\x00\x00\x05" \
"\xe1\x80\xf5\x28\x00\x20\x7e\x71\xc0\x53\x40\x70\x19\xa3\x40\x8b" \
"\x00\x04\x00\x00\x01\x78\xb4\x23\x5a\x00\x08\x20\x54\x24\x14\xce" \
"\x1a\x08\x68\xde\x22\xc0\x02\x00\x00\x00\x16\xc4\x39\x18\x1e\x7d" \
"\xf4\x14\xe0\x0e\x0a\x68\xe0\x22\xc0\x02\x00\x00\x00\x1d\xba\x45" \
"\x72\x08\x01\x5b\x05\x37\x84\x83\x12\x05\x8a\x00\x00\x00\x00\xbc" \
"\xc7\x38\x31\x00\x04\x9a\xfd\xc3\x0e\x0a\x26\x01\x07\x24\x0c\x14" \
"\x00\x00\x00\x01\x79\x93\x67\xea\x00\x09\x35\xe2\x85\x78\x14\x4a" \
"\x02\x10\x48\x1a\x28\x00\x00\x00\x02\xf3\x3e\xbb\xf4\x00\x12\x6c" \
"\x29\x0c\x00\x28\x90\x04\x24\x90\x38\x50\x00\x00\x00\x05\xe6\xe1" \
"\x51\x68\x00\x24\xd8\x7a\x17\x50\x50\xd0\x10\x51\x20\x78\xa0\x00" \
"\x00\x00\x0b\xcd\xda\x58\xd0\x00\x49\xb2\x94\x34\x80\xa1\x90\x20" \
"\xb1\x01\x01\x20\x00\x00\x00\x07\xa5\xe3\x9c\x8f\x8c\x30\x93\x10" \
"\x11\x12\x00\x00\x00\x00\x7a\x7e\x30\xf0\xf8\xf3\x0a\x81\x01\x21" \
"\x20\x00\x00\x00\x07\xa7\xf2\x6c\x8f\x99\x70\x9e\x24\x15\x24\x00" \
"\x00\x00\x05\x91\xb4\x99\x3c\x80\x02\x48\xa1\x8c\x90\x13\xe4\x03" \
"\x50\x28\x48\x0c\x30\x90\x58\x90\x00\x00\x00\x26\x44\x7a\x63\x8a" \
"\x00\x0b\x23\x79\x14\x9d\x00\x10\x6f\xb3\x31\x20\xe2\x42\x55\xf1" \
"\x50\x88\x18\x6a\x84\x00\xc3\x89\x05\xc9\x00\x00\x00\x02\x64\x21" \
"\x66\x1c\x20\x00\x92\x2b\x43\x35\x17\x09\x11\xa8\x20\x02\x0e\x1f" \
"\xe0\xb5\x15\x13\x02\x07\xa8\x94\x10\x40\x90\x60\x90\x00\x00\x00" \
"\x16\x3f\xe8\x60\x92\x00\x09\x23\x2c\x1f\xd0\x52\x62\x0a\xc0\xa2" \
"\x40\x41\x11\x01\x92\x20\x00\x00\x00\x08\xee\x89\x8e\xa4\x8a\x00" \
"\xcb\x81\x01\xa2\x20\x00\x00\x00\x08\xe3\x99\x8e\x24\x8a\x78\xca" \
"\xc3\x41\xc2\x26\x00\x10\x00\x00\x00\xe9\xc6\x00\x30\x6b\x50\x58" \
"\x28\x6c\x20\x48\xd0\x6c\x89\x80\x04\x00\x00\x00\x46\x54\x0f\x67" \
"\x00\x6c\xfe\x82\x87\x02\x84\xcd\x32\x48\x98\x00\x20\x00\x00\x0c" \
"\x8e\xe4\xe5\x54\x00\x10\x60\x70\x78\x2b\x28\x40\x50\xd3\x28\x89" \
"\x80\x02\x00\x00\x00\xc7\xc9\x4d\xf1\x40\x01\x02\x92\xf4\x82\xb2" \
"\x43\xc5\x4d\x32\xc8\x98\x00\x20\x00\x00\x0c\x78\x68\xde\x14\x00" \
"\x10\x56\x70\xd8\x2b\x30\x48\x58\xd3\x30\x89\x80\x02\x00\x00\x00" \
"\xc6\xe3\x8d\x91\x40\x01\x02\x7b\x00\x02\xb2\xc4\x45\xc9\x07\xcd" \
"\x00\x00\x00\x00\x59\x24\xc4\xb4\x80\x02\x54\xd7\x97\xd1\xd0\x50" \
"\xd0\x28\xc1\x21\x01\xa0\x00\x00\x00\x0b\x23\xf0\xe2\xd0\x00\x4a" \
"\x9b\x04\xf9\x90\x0a\x19\x05\x19\x24\x21\x34\x00\x00\x00\x01\x64" \
"\x84\x26\x7a\x00\x09\x53\x44\x9f\x2f\x41\x42\x40\xc3\x44\x84\x46" \
"\x80\x00\x00\x00\xac\x8c\x25\xfa\x40\x01\x6a\xf2\x93\xee\x0a\x00" \
"\x21\x0e\xbe\x7b\x84\x14\x22\x0c\x36\x48\x46\x68\x00\x00\x00\x0a" \
"\xc8\x86\x72\x34\x00\x12\x0e\xe8\xf2\xe0\xcd\xf8\xe3\xc0\x50\x80" \
"\x30\xe0\x81\x21\x90\x00\x00\x00\x03\x1f\x9a\x8e\x86\x56\xe7\x82" \
"\x08\x12\x99\x00\x00\x00\x00\x31\xfb\x2c\xbc\x65\x2a\x7b\x30\x81" \
"\x31\x90\x00\x00\x00\x03\x1e\xfb\x25\x46\x51\xc7\x8d\x80";
//*/

uint8_t mapem2[] = {0x01, 0x05, 0x00, 0x00, 0x00, 0x7b, 0x08, 0x00, 0x03, 0x04, 0x56, 0x99,
                    0x4e, 0x0d, 0xf9, 0x6d, 0xd9, 0xb3, 0x80, 0x18, 0x8b, 0x17, 0x01, 0x34,
                    0xb6, 0x9f, 0x66, 0x5c, 0x14, 0x4c, 0x63, 0x80, 0x30, 0x40, 0xc3, 0x50,
                    0x00, 0x00, 0x2a, 0x85, 0x64, 0x80, 0x22, 0x80, 0x00, 0x00, 0x01, 0xb3,
                    0x5f, 0x0b, 0x47, 0x90, 0x00, 0x47, 0xab, 0x1c, 0x56, 0x8f, 0x16, 0xf7,
                    0x11, 0x1e, 0x97, 0x70, 0x54, 0x2d, 0x3c, 0xc3, 0xf2, 0x41, 0x70, 0x0a,
                    0x10, 0x00, 0x90, 0x7e, 0x04, 0x48, 0x04, 0x28, 0x00, 0x00, 0x00, 0x1b,
                    0x37, 0x38, 0xb2, 0xdd, 0x00, 0x04, 0x7a, 0x53, 0xc1, 0xe8, 0xf1, 0x27,
                    0x70, 0x11, 0xea, 0x0f, 0x0e, 0x42, 0xd2, 0x4c, 0x15, 0x14, 0x16, 0x80,
                    0xa0, 0x64, 0x08, 0x90, 0x0c, 0x50, 0x00, 0x00, 0x00, 0x56, 0x71, 0x69,
                    0x62, 0x3a, 0x00, 0x08, 0xf2, 0xf5, 0x7d, 0x01, 0xe2, 0xe6, 0xe1, 0x01,
                    0xf9, 0xdc, 0x80, 0x3b, 0x7f, 0x5c, 0x86, 0xd8, 0x60, 0xa0, 0x6c, 0x7a,
                    0xb0, 0x20, 0x60, 0x08, 0x40, 0x14, 0x48, 0x00, 0x00, 0x00, 0x22, 0x73,
                    0xbd, 0x57, 0x10, 0xf3, 0x55, 0x7d, 0x31, 0xe2, 0xbe, 0xdf, 0x83, 0xd5,
                    0x2e, 0x20, 0x04, 0x01, 0x84, 0x80, 0x00, 0x00, 0x01, 0x27, 0xa8, 0xf4,
                    0xf8, 0x02, 0x73, 0xf4, 0xd1, 0xac, 0xf7, 0xa8, 0x00, 0x82, 0x00, 0x82,
                    0x40, 0x00, 0x00, 0x01, 0x93, 0xae, 0x9a, 0x8c, 0x15, 0x85, 0x76, 0xa2,
                    0x80, 0x08, 0x2d, 0x45, 0xc6, 0xc1, 0xe3, 0x12, 0xdf, 0x83, 0xd5, 0x56,
                    0x26, 0x8d, 0x02, 0xc4, 0x58, 0x00, 0x20, 0x00, 0x00, 0x0c, 0xcf, 0xa2,
                    0xc8, 0x94, 0x00, 0x10, 0x33, 0x71, 0x38, 0x20, 0x30, 0x3c, 0xd0, 0x30,
                    0x45, 0x80, 0x02, 0x00, 0x00, 0x00, 0xcd, 0xfb, 0x6b, 0x2e, 0x40, 0x01,
                    0x04, 0x72, 0xe8, 0x02, 0x02, 0xc3, 0x4d, 0x03, 0x44, 0x58, 0x00, 0x20,
                    0x00, 0x00, 0x04, 0xe2, 0x32, 0xab, 0x44, 0x39, 0x11, 0x12, 0x00, 0x08,
                    0x20, 0x38, 0x34, 0xd0, 0x38, 0x45, 0x80, 0x02, 0x00, 0x00, 0x00, 0xce,
                    0xa4, 0xe9, 0x2a, 0x40, 0x01, 0x04, 0x6a, 0xe7, 0x02, 0x03, 0x44, 0x49,
                    0x05, 0x09, 0x00, 0x00, 0x00, 0x03, 0x27, 0xb2, 0x93, 0xb2, 0x82, 0x56,
                    0x4b, 0x01, 0xc1, 0x0b, 0x81, 0xc5, 0xcc, 0x31, 0x3b, 0x1d, 0x7d, 0x20,
                    0x02, 0x82, 0x01, 0x80, 0xc9, 0x05, 0x49, 0x00, 0x00, 0x00, 0x01, 0x67,
                    0x6a, 0x32, 0xce, 0x20, 0x00, 0xaf, 0x22, 0x2d, 0x55, 0x40, 0x05, 0x17,
                    0xfc, 0x2e, 0x58, 0x21, 0x00, 0x10, 0x90, 0x58, 0x90, 0x00, 0x00, 0x00,
                    0x16, 0x76, 0x23, 0x24, 0x92, 0x00, 0x08, 0xf2, 0x24, 0xd6, 0xb1, 0x7f,
                    0x32, 0xd6, 0x0a, 0x0f, 0xc1, 0x10, 0x5c, 0x0a, 0x48, 0x2e, 0x48, 0x00,
                    0x00, 0x00, 0x0b, 0x3a, 0xe1, 0x8d, 0x85, 0x00, 0x04, 0x78, 0xe8, 0x6a,
                    0xf8, 0xbf, 0xdd, 0x75, 0xc1, 0x05, 0xa0, 0xa2, 0x03, 0x04, 0x40, 0x00,
                    0x00, 0x00, 0x93, 0xa7, 0xf7, 0xa7, 0x47, 0x85, 0x96, 0xbf, 0x8b, 0xe8,
                    0x57, 0x48, 0x40, 0x64, 0x88, 0x00, 0x00, 0x00, 0x12, 0x74, 0x8a, 0xe9,
                    0x68, 0xf0, 0xae, 0xdd, 0x31, 0x7d, 0x0a, 0xed, 0x9a, 0x0f, 0x91, 0x30,
                    0x00, 0x40, 0x00, 0x00, 0x19, 0xe1, 0xe5, 0x0f, 0x48, 0x00, 0x20, 0x65,
                    0xdf, 0xd0, 0x41, 0x00, 0xa9, 0xa1, 0x01, 0x13, 0x00, 0x04, 0x00, 0x00,
                    0x01, 0x9f, 0x59, 0x50, 0xc0, 0x80, 0x02, 0x09, 0xda, 0x1c, 0x04, 0x0f,
                    0x8a, 0x80, 0x0d, 0x80, 0x00, 0x80, 0x00, 0x00, 0x49, 0x93, 0x7b, 0xd6,
                    0xa3, 0xd0, 0x6b, 0x44, 0xc7, 0xd8, 0xe6, 0x15, 0x82, 0x0d, 0x00, 0x00,
                    0x80, 0x00, 0x00, 0x89, 0xd1, 0x84, 0xe3, 0x41, 0xf5, 0xab, 0xa0, 0x78,
                    0x06, 0x6d, 0x70, 0xbb, 0x45, 0x84, 0x41, 0x08, 0x40, 0x84, 0x85, 0x26,
                    0x80, 0x00, 0x00, 0x01, 0x2f, 0x65, 0x6c, 0x3d, 0x40, 0x01, 0x19, 0xe9,
                    0xd2, 0x52, 0x20, 0xb0, 0x24, 0x11, 0x0c, 0xe9, 0x69, 0x02, 0x06, 0x41,
                    0x89, 0x0a, 0x8d, 0x00, 0x00, 0x00, 0x01, 0x5e, 0x74, 0x19, 0x34, 0x80,
                    0x02, 0x20, 0x1c, 0x18, 0x61, 0x07, 0x91, 0x1e, 0x82, 0x06, 0x01, 0x89,
                    0x0a, 0xcd, 0x00, 0x00, 0x00, 0x03, 0x57, 0xc2, 0x22, 0x42, 0x00, 0x08,
                    0x86, 0x08, 0xa7, 0x84, 0x21, 0xa4, 0xf6, 0x21, 0x87, 0x29, 0xa0, 0x53,
                    0x89, 0x60, 0x20, 0x10, 0x1c, 0x90, 0xb0, 0xd0, 0x00, 0x00, 0x00, 0x25,
                    0x75, 0x32, 0x8b, 0xa0, 0x00, 0x88, 0x59, 0xca, 0xb8, 0x42, 0xc6, 0x51,
                    0x62, 0x16, 0x32, 0xa1, 0x24, 0x02, 0x83, 0xa0, 0xfc, 0x21, 0x08, 0x01,
                    0x02, 0x05, 0xa6, 0x40, 0x00, 0x00, 0x01, 0x0b, 0x3d, 0x99, 0x48, 0x43,
                    0xa8, 0x5d, 0x02, 0x18, 0x62, 0xcd, 0x10, 0x9e, 0x92, 0xa0, 0x81, 0x71,
                    0x90, 0x00, 0x00, 0x00, 0x41, 0xf9, 0x8a, 0xc5, 0x47, 0x4c, 0x90, 0x88,
                    0x00, 0x82, 0x02, 0xa1, 0xb7, 0x10, 0x85, 0x11, 0x81, 0xa1, 0x99, 0x9b,
                    0x00, 0x04, 0x00, 0x00, 0x01, 0x7d, 0x5e, 0x67, 0x92, 0x00, 0x08, 0x23,
                    0xc7, 0x40, 0x10, 0x68, 0x30, 0x68, 0x68, 0x66, 0xc0, 0x01, 0x00, 0x00,
                    0x00, 0x57, 0xd7, 0x35, 0xd2, 0x00, 0x08, 0x1d, 0x08, 0x80, 0x10, 0x66,
                    0x2c, 0x68, 0x6a, 0x66, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x57, 0x8e, 0xb8,
                    0x92, 0x00, 0x08, 0x24, 0x07, 0x60, 0x10, 0x6c, 0x38, 0x68, 0x6c, 0x66,
                    0xc0, 0x01, 0x00, 0x00, 0x00, 0x56, 0x30, 0x40, 0x1a, 0x00, 0x08, 0x1c,
                    0x89, 0x00, 0x10, 0x6a, 0x34, 0x20, 0x5e, 0x64, 0x00, 0x00, 0x00, 0x20,
                    0x32, 0xa6, 0xb4, 0x0f, 0x8a, 0x46, 0x07, 0x59, 0x03, 0x03, 0x38, 0x79,
                    0x81, 0x87, 0x4a, 0x10, 0xb0, 0x29, 0x08, 0x00, 0x84, 0x87, 0xa8, 0x80,
                    0x00, 0x00, 0x01, 0x2a, 0x8b, 0xb0, 0xbd, 0x00, 0x04, 0x60, 0xb4, 0xa2,
                    0x90, 0xc1, 0x43, 0x44, 0xc6, 0x75, 0x14, 0xc4, 0x92, 0x00, 0x28, 0x20,
                    0x64, 0x28, 0x90, 0xf9, 0x10, 0x00, 0x00, 0x00, 0x15, 0x54, 0xa6, 0xbe,
                    0x20, 0x00, 0x8c, 0x14, 0xf4, 0x32, 0x18, 0x29, 0xe9, 0x18, 0x48, 0x18,
                    0x0a, 0x40, 0x20, 0x5a, 0x01, 0x42, 0xc4, 0x0f, 0xd0, 0x80, 0x00, 0x00,
                    0x02, 0x1c, 0xfe, 0xf3, 0xd0, 0x30, 0x5a, 0x50, 0xfc, 0x66, 0x1a, 0x97,
                    0x90, 0x8a, 0xb6, 0x66, 0x44, 0x10, 0x10, 0x80, 0x00, 0x00, 0x04, 0x1d,
                    0x15, 0x36, 0x1e, 0x30, 0x6a, 0x51, 0x30, 0x26, 0xd2, 0x3c, 0x84, 0xe3,
                    0xc1, 0x30, 0x98, 0xd8, 0xd8, 0x11, 0x35, 0x31, 0x8d, 0x11, 0xd1, 0x18,
                    0x00, 0x20, 0x00, 0x00, 0x08, 0x79, 0x75, 0xd4, 0x00, 0x10, 0x30, 0x6e,
                    0x98, 0x21, 0x20, 0x78, 0xd1, 0x21, 0x11, 0x80, 0x02, 0x00, 0x00, 0x00,
                    0x9c, 0x11, 0x6b, 0x50, 0x00, 0x41, 0x39, 0xc4, 0x60, 0x84, 0x71, 0xe3,
                    0x44, 0x94, 0x46, 0x00, 0x08, 0x00, 0x00, 0x02, 0x7a, 0x7e, 0x9e, 0x40,
                    0x01, 0x03, 0xd8, 0xd3, 0x02, 0x12, 0x87, 0xcd, 0x12, 0x91, 0x18, 0x00,
                    0x20, 0x00, 0x00, 0x0a, 0xc3, 0x6d, 0xf5, 0x40, 0x01, 0x04, 0x51, 0x2d,
                    0x02, 0x12, 0x47, 0xcd, 0x12, 0xd1, 0x18, 0x00, 0x20, 0x00, 0x00, 0x0b,
                    0xa9, 0x8e, 0x42, 0x90, 0x00, 0x40, 0xf8, 0xb3, 0x80, 0x84, 0xc2, 0x03,
                    0x44, 0xc4, 0x46, 0x00, 0x08, 0x00, 0x00, 0x02, 0xeb, 0x9b, 0xb5, 0x14,
                    0x00, 0x10, 0x44, 0x73, 0xe8, 0x21, 0x2c, 0x80, 0x90, 0xf1, 0x10, 0x00,
                    0x00, 0x00, 0x30, 0xc9, 0x3d, 0x30, 0x06, 0x27, 0x04, 0x02, 0xe9, 0x6d,
                    0x01, 0x5f, 0xa1, 0xd0, 0x8f, 0xcc, 0x28, 0x00, 0xa0, 0x82, 0xf0, 0x90,
                    0x44, 0x10, 0x00, 0x10, 0x00, 0x00, 0x08, 0x6f, 0xd7, 0x5a, 0x18, 0x2e,
                    0x68, 0x82, 0x30, 0x55, 0x52, 0x38, 0x10, 0x36, 0x14, 0x00, 0x84, 0x00,
                    0x02, 0x00, 0x00, 0x04, 0x26, 0x39, 0xb5, 0x6c, 0x01, 0x30, 0xb3, 0xc0,
                    0xa2, 0xd4, 0x00, 0x44, 0x2a, 0xc0, 0x1e, 0x34, 0x48, 0x03, 0x6a, 0x60};

	Main m(argv[1], port, 1337);
	_main = &m;

	m.ms.add_msg({mapem1, sizeof(mapem1)});

	m.run();

	exit(0);
}

Main::Main(char *addr, int port, StationID_t stationId) : mac(), last_key()
{
	mac[0] = 0x24;
	mac[1] = 0xA4;
	mac[2] = 0x3C;
	mac[3] = 0x02;
	mac[4] = 0xB6;
	mac[5] = 0x00;

	station_id = stationId;

	if (p.connect(addr, port)) {
		throw std::exception();
	}

	if (!font.loadFromFile("FiraCode-Regular.ttf"))
	{
		throw std::exception();
	}

	reader = std::thread([this] {
		reader_thread();
	});

	window = new sf::RenderWindow(sf::VideoMode(1920, 1080), "v2x");
	window->setVerticalSyncEnabled(true);
}

Main::~Main()
{
	delete window;
	p.disconnect();
}

void Main::run()
{
	//std::thread camthread(send_cam_thread, mac, station_id, &p);
	//std::thread denmthread(send_denm_thread, mac, station_id, &p);

	while (window->isOpen())
	{
		sf::Event event = {};
		while (window->pollEvent(event))
		{
			// "close requested" event: we close the window
			if (event.type == sf::Event::Closed)
				window->close();
		}

		if (window->hasFocus())
		{
			key_handler();
		}

		window->clear(sf::Color::Black);

		draw_data();

		write_text(20, 0, sf::Color::White, "Quit | show CDSM | Up | Down | sEnd");

		window->display();
	}
}
